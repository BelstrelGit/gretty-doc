= Hot deployment
Andrey Hihlovskiy
2014-05-29
:sectanchors:
:jbake-type: page
:jbake-status: published

Gretty supports hot deployment: whenever the classes, jars or resources
[comprising the web-app] are updated, Gretty automatically reloads web-app.

Since version 0.0.18 Gretty has new cool feature: it automatically recompiles and then reloads your web-app, as soon as source code files have changed. 

You can configure hot deployment by adjusting the link:Gretty-configuration.html[gretty configuration] properties:

* link:Gretty-configuration.html#_scaninterval[scanInterval] defines scan interval, in seconds.

* link:Gretty-configuration.html#_scandir[scanDir] defines one or more
directories, scanned by hot-deployment. The directory could be a string 
or instance of java.io.File class, denoting relative (to the project) or absolute path.

* link:Gretty-configuration.html#_onscan[onScan] adds a closure to be called
on hot-deployment scan, i.e. each scanInterval seconds. The function is
called unconditionally, regardless of whether hot deployment detects
changed files or not.

* link:Gretty-configuration.html#_onscanfileschanged[onScanFilesChanged]
adds a closure to be called whenever hot-deployment detects that files
or folders were changed. The closure receives List as the parameter,
which holds all changed files and folders.

Gretty hot deployment assumes the following defaults:

* link:Gretty-configuration.html#_scaninterval[scanInterval] is set to zero,
that means that hot deployment is disabled. You need to assign it to
non-zero value to enable hot deployment.

* Hot deployment by default scans the following folders:

** `"${projectDir}/src/main/java"`
** `"${projectDir}/src/main/resources"`
** `"${projectDir}/src/main/groovy"`
** `"${projectDir}/build/classes/main"`
** `"${projectDir}/build/resources/main"`
** `"${projectDir}/src/main/webapp"`

as well as all dependency jars and overlay-WARs, comprising the
web-app.

IMPORTANT: Current implementation of hot deployment does not detect changes in
Gretty configuration. That means: whenever you change and save
"build.gradle", containing Gretty configuration, you need to restart the
web-app "by hand", only then the changes will have effect.
